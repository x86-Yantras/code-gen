const assertMock = require("../../../lib/test/assertMock");
const context = require("../../../lib/test/context");
const fake = require("../../../lib/test/faker");
const { {{.Operation}}Payload } = require("./{{.Operation}}");
const {{.Operation}} = require("./{{.Operation}}");
const storage = require("../adapters/storage");

jest.mock("../adapters/storage");

describe("{{.Operation}} test", () => {
  const payload = fake({ {{.Operation}}Payload });

  afterEach(() => {
    storage.{{.ServiceName}}.{{.Operation}}.mockClear();
  });

  beforeEach(() => {
    storage.{{.ServiceName}}.{{.Operation}} = jest.fn();
  });

  it("should successfully run {{.Operation}}", async () => {
    storage.{{.ServiceName}}.{{.Operation}}.mockResolvedValue(payload);
    const resp = await {{.Operation}}(context, payload);

    expect(storage.{{.ServiceName}}.{{.Operation}}).toHaveBeenCalledWith(context, payload);
    expect(resp).toEqual(payload);
    assertMock(storage.{{.ServiceName}}.{{.Operation}}, 1);
  });

  it("should throw error", async () => {
    storage.{{.ServiceName}}.{{.Operation}}.mockRejectedValue("db error");
    try {
      await {{.Operation}}(context, payload);
    } catch (error) {
      expect(error).toEqual("db error");
    }
    assertMock(storage.{{.ServiceName}}.{{.Operation}}, 1);
  });
});
