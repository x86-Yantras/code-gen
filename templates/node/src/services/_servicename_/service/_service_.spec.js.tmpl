const assertMock = require("../../../lib/test/assertMock");
const context = require("../../../lib/test/context");
const fake = require("../../../lib/test/faker");
const storage = require("../adapters/storage/storage");
const { {{.ServiceName}}Payload } = require("./{{.ServiceName}}");
const {{.ServiceName}} = require("./{{.ServiceName}}");
jest.mock("../adapters/storage/storage");

describe("{{.ServiceName}} test", () => {
  const payload = fake({ {{.ServiceName}}Payload });

  afterEach(() => {
    storage.{{.ServiceName}}.mockClear();
  });

  it("should successfully run {{.ServiceName}}", async () => {
    storage.{{.ServiceName}}.mockResolvedValue(payload);
    const resp = await {{.ServiceName}}(context, payload);

    expect(storage.{{.ServiceName}}).toHaveBeenCalledWith(context, payload);
    expect(resp).toEqual(payload);
    assertMock(storage.{{.ServiceName}}, 1);
  });

  it("should throw error", async () => {
    storage.{{.ServiceName}}.mockRejectedValue("db error");
    try {
      await {{.ServiceName}}(context, payload);
    } catch (error) {
      expect(error).toEqual("db error");
    }
    assertMock(storage.{{.ServiceName}}, 1);
  });
});
